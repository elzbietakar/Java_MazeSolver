/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package mazesolver;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

/**
 *
 * @author pawel
 */
public class MazePanel extends javax.swing.JPanel {

    /**
     * Creates new form MazePanel
     */
    private MazeData mazeData;
    int panelSize; 
    int cellSize;
    private boolean chooseStartMode = false;
    private boolean chooseEndMode = false;


    public MazePanel() {
        this.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (chooseStartMode || chooseEndMode) {
                    int col = e.getX() / cellSize;
                    int row = e.getY() / cellSize;
                    
                    try {
                        if (chooseStartMode == true)
                            mazeData.setStartElement(mazeData.getArrayElement(row, col));      
                        
                        if (chooseEndMode == true)         
                            mazeData.setEndElement(mazeData.getArrayElement(row, col));
                            
                    } catch (IllegalArgumentException ex) {
                        System.err.println("Error: " + ex);
                    }   
                    System.out.println("Wybrano element: (" + row + ", " + col + ")");
                    chooseStartMode = false;
                    chooseEndMode = false;
                    repaint();
                }
            }
        });
        
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        this.panelSize = (int)(0.8* screenSize.getHeight());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    protected void paintComponent(Graphics cell) {
        System.out.println("MALUJE PANEL:");
        for (int i = 0; i < mazeData.getRows(); i++) 
            for (int j = 0; j < mazeData.getCols(); j++) 
                mazeData.getArrayElement(i, j).getMazeElementType().paintCell(cell, j, i, cellSize);
    }
    
    @Override
    public Dimension getPreferredSize() {
        return new Dimension(mazeData.getRows() * cellSize, mazeData.getCols() * cellSize);
    }
    
    public void setChooseStartMode(boolean chooseStartMode) {
        this.chooseStartMode = chooseStartMode;
    }
    
    public void setChooseEndMode(boolean chooseEndMode) {
        this.chooseEndMode = chooseEndMode;
    }
    
    void redraw(MazeData mazeData) {
        this.mazeData = mazeData;
        this.cellSize = panelSize/mazeData.getRows();
        if (cellSize < 4) {
            cellSize = 4;
        }
        initComponents();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
