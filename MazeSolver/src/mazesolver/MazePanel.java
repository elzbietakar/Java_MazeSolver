/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package mazesolver;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Toolkit;

/**
 *
 * @author pawel
 */
public class MazePanel extends javax.swing.JPanel {

    /**
     * Creates new form MazePanel
     */
    private MazeData mazeData;
    Color wallCol = new Color(234,112,44);
    Color startCol = new Color(43, 138, 106);
    Color endCol = new Color (117, 35, 157);
    int panelSize; //in pixels
    int cellSize;

    public MazePanel(MazeData mazeData) {
        this.mazeData = mazeData;
       
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        this.panelSize = (int)(0.8*screenSize.getHeight());
        
        this.cellSize = panelSize/mazeData.getRows();
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    

    
    @Override
    protected void paintComponent(Graphics cell) {
        for (int i = 0; i < mazeData.getRows(); i++) {
            for (int j = 0; j < mazeData.getCols(); j++) {
                if (mazeData.elementsArray[i][j].getMazeCellType() == MazeElementType.WALL) {
                    cell.setColor(wallCol);
                    cell.fillRect(j * cellSize, i * cellSize, cellSize, cellSize);
                }
                if (mazeData.elementsArray[i][j].getMazeCellType() == MazeElementType.START) {
                    cell.setColor(startCol);
                    cell.fillRect(j * cellSize, i * cellSize, cellSize, cellSize);
                }   
                if (mazeData.elementsArray[i][j].getMazeCellType() == MazeElementType.STOP) {
                    cell.setColor(endCol);
                    cell.fillRect(j * cellSize, i * cellSize, cellSize, cellSize);
                }                  
            }
        }
    }
    
    @Override
    public Dimension getPreferredSize() {
        return new Dimension(mazeData.getRows() * cellSize, mazeData.getCols() * cellSize);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
